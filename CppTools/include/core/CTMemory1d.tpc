#include <core\CTCMemory.h>

template<typename Tx>
CppTools::CTMemory::CTMemory1d<Tx>::CTMemory1d()
: CTSvrSngClient<Tx>(NULL, NULL), _size(0)
{
}

template<typename Tx>
CppTools::CTMemory::CTMemory1d<Tx>::CTMemory1d(const CTSize_t size)
: CTSvrSngClient<Tx>(NULL, NULL), _size(size)
{
	create(_size);
}

template<typename Tx>
CppTools::CTMemory::CTMemory1d<Tx>::CTMemory1d(const CTSize_t size, const Tx default_value)
: CTSvrSngClient<Tx>(NULL, NULL), _size(size)
{
	create(_size, default_value);
}

template<typename Tx>
CppTools::CTMemory::CTMemory1d<Tx>::~CTMemory1d()
{
	dispose();
}

template<typename Tx>
void CppTools::CTMemory::CTMemory1d<Tx>::create(const CTSize_t size)
{
	if(size <= 0)
		throw CppTools::CTException::CTMemoryException::CTMemorySizeError();
	else
	{
		if(this->isClientValid())
		{
			dispose();
		}
		this->setClient(NewArray1d<Tx>(size));
		this->_size = size;
	}
}

template<typename Tx>
void CppTools::CTMemory::CTMemory1d<Tx>::create(const CTSize_t size, const Tx default_value)
{
	if(size <= 0)
		throw CppTools::CTException::CTMemoryException::CTMemorySizeError();
	else
	{
		if(this->isClientValid())
		{
			dispose();
		}
		this->setClient(NewArray1d<Tx>(size, default_value));
		this->_size = size;
	}
}

template<typename Tx>
void CppTools::CTMemory::CTMemory1d<Tx>::dispose()
{
	DeleteArray1d<Tx>(this->getClient());
	_size = 0;
}

template<typename Tx>
bool CppTools::CTMemory::CTMemory1d<Tx>::isValid() const
{
	return this->isClientValid();
}

template<typename Tx>
CTSize_t CppTools::CTMemory::CTMemory1d<Tx>::size() const
{
	return this->_size;
}

template<typename Tx>
Tx* CppTools::CTMemory::CTMemory1d<Tx>::original_data() const
{
	return this->getClient();
}

template<typename Tx>
Tx* CppTools::CTMemory::CTMemory1d<Tx>::safe_data() const
{
	return this->getSafeClient();
}

template<typename Tx>
const Tx* CppTools::CTMemory::CTMemory1d<Tx>::const_data() const
{
	return this->getConstClient();
}

template<typename Tx>
Tx& CppTools::CTMemory::CTMemory1d<Tx>::operator [](const CTSize_t index)
{
	if((index < 0) || (index >= _size))
	{
		throw CppTools::CTException::CTMemoryException::CTArrayOutRange1D(index);
	}
	else
	{
		return this->getSafeClient()[index];		
	}
}

template<typename Tx>
const Tx& CppTools::CTMemory::CTMemory1d<Tx>::operator [](const CTSize_t index) const
{
	if((index < 0) || (index >= _size))
	{
		throw CppTools::CTException::CTMemoryException::CTArrayOutRange1D(index);
	}
	else
	{
		return this->getConstClient()[index];
	}
}