#include <core\CTCMemory.h>

template<typename Tx>
CppTools::CTMemory::CTMemory2d<Tx>::CTMemory2d()
: CppTools::CTData::CTSvrMulClient<CppTools::CTMemory::CTMemory1d<Tx> >(NULL), size_x(0), size_y(0)
{
}

template<typename Tx>
CppTools::CTMemory::CTMemory2d<Tx>::CTMemory2d(const CTSize_t size_x, const CTSize_t size_y)
: CppTools::CTData::CTSvrMulClient<CppTools::CTMemory::CTMemory1d<Tx> >(NULL), size_x(size_x), size_y(size_y)
{
	create(size_x, size_y);
}

template<typename Tx>
CppTools::CTMemory::CTMemory2d<Tx>::CTMemory2d(const CTSize_t size_x, const CTSize_t size_y,
											   const Tx default_value)
: CppTools::CTData::CTSvrMulClient<CppTools::CTMemory::CTMemory1d<Tx> >(NULL), size_x(size_x), size_y(size_y)
{
	create(size_x, size_y, default_value);
}

template<typename Tx>
CppTools::CTMemory::CTMemory2d<Tx>::~CTMemory2d()
{
	dispose();
}

template<typename Tx>
void CppTools::CTMemory::CTMemory2d<Tx>::create(const CTSize_t size_x, const CTSize_t size_y)
{
	if(size_x <= 0 || size_y <= 0)
		throw CppTools::CTException::CTMemoryException::CTMemorySizeError();
	else
	{
		for(int i = 0; i < size_x; ++i)
			this->setClient(new Mem1d_t(size_y));
		this->size_x = size_x;
		this->size_y = size_y;
	}
}

template<typename Tx>
void CppTools::CTMemory::CTMemory2d<Tx>::create(const CTSize_t size_x, const CTSize_t size_y,
												const Tx default_value)
{
	if(size_x <= 0 || size_y <= 0)
		throw CppTools::CTException::CTMemoryException::CTMemorySizeError();
	else
	{
		for(int i = 0; i < size_x; ++i)
			this->setClient(new Mem1d_t(size_y, default_value));
		this->size_x = size_x;
		this->size_y = size_y;
	}
}

template<typename Tx>
void CppTools::CTMemory::CTMemory2d<Tx>::dispose()
{
	size_x = 0;
	size_y = 0;
}

template<typename Tx>
bool CppTools::CTMemory::CTMemory2d<Tx>::isValid() const
{
	return this->isClientValid();
}

template<typename Tx>
CTSize_t CppTools::CTMemory::CTMemory2d<Tx>::size() const
{
	return this->size_x * size_y;
}

template<typename Tx>
Tx** CppTools::CTMemory::CTMemory2d<Tx>::original_data() const
{
	return this->getClient();
}

//template<typename Tx>
//Tx** CppTools::CTMemory::CTMemory2d<Tx>::safe_data() const
//{
//	return this->getSafeClient();
//}
//
//template<typename Tx>
//const Tx** CppTools::CTMemory::CTMemory2d<Tx>::const_data() const
//{
//	return this->getConstClient();
//}

template<typename Tx>
typename CppTools::CTMemory::CTMemory2d<Tx>::Mem1d_t& CppTools::CTMemory::CTMemory2d<Tx>::operator [](const CTSize_t index)
{
	if((index < 0) || (index >= size_x))
	{
		throw CppTools::CTException::CTMemoryException::CTArrayOutRange(std::string("第一个维度越界,位置: ") + _CT_STR ::NtoS(index));
	}
	else
	{
		return (*(this->getClient()[index]));
	}
}

template<typename Tx>
const typename CppTools::CTMemory::CTMemory2d<Tx>::Mem1d_t& CppTools::CTMemory::CTMemory2d<Tx>::operator [](const CTSize_t index) const
{
	if((index < 0) || (index >= size_x))
	{
		throw CppTools::CTException::CTMemoryException::CTArrayOutRange(std::string("第一个维度越界,位置: ") + _CT_STR ::NtoS(index));
	}
	else
	{
		return (*(this->getClient()[index]));
	}
}