//CTRefObject<Tx>::_CTRO_Clnt
template <typename Tx>
CppTools::CTData::CTRefObject<Tx>::_CTRO_Clnt::_CTRO_Clnt()
: _sco(NULL), _num(NULL)
{
	init();
}

template <typename Tx>
CppTools::CTData::CTRefObject<Tx>::_CTRO_Clnt::~_CTRO_Clnt()
{
	dispose();
}

template <typename Tx>
void CppTools::CTData::CTRefObject<Tx>::_CTRO_Clnt::init()
{
	_sco = new CTSvrSngClient<Tx>();
	_num = new CTInt(1);
}

template <typename Tx>
void CppTools::CTData::CTRefObject<Tx>::_CTRO_Clnt::dispose()
{
	CppTools::DeleteObj(_sco);
	CppTools::DeleteObj(_num);
}

//CTRefObject

template <typename Tx>
CppTools::CTData::CTRefObject<Tx>::CTRefObject(const p_Tx ref)
: _roo(NULL)
{
	init();
	_roo->_sco->setClient(ref);
}

template <typename Tx>
CppTools::CTData::CTRefObject<Tx>::CTRefObject(const CTRefObject<Tx>& ref)
{
	_roo = ref._roo;
	++(*(_roo->_num));
}

template <typename Tx>
CppTools::CTData::CTRefObject<Tx>::CTRefObject(const CTRefObject<Tx>* ref)
{
	if(ref != this)
	{
		_roo = ref->_roo;
		++(*(_roo->_num));
	}
}

template <typename Tx>
CppTools::CTData::CTRefObject<Tx>::~CTRefObject()
{
	dispose();
}

template <typename Tx>
void CppTools::CTData::CTRefObject<Tx>::init()
{
	_roo = new _CTRO_Clnt();
}

template <typename Tx>
void CppTools::CTData::CTRefObject<Tx>::dispose()
{
	if(_roo->_num->getData() <= 1)
	{
		CppTools::DeleteObj(_roo->_sco->getClient());
		CppTools::DeleteObj(_roo);
	}
	else
	{
		--(*(_roo->_num));
	}
}

template <typename Tx>
CTSize_t CppTools::CTData::CTRefObject<Tx>::getCount() const
{
	return _roo->_num->getData();
}

template <typename Tx>
void CppTools::CTData::CTRefObject<Tx>::setReference(p_Tx ref)
{
	if(ref != _roo->_sco->getClient())
	{
		dispose();
		init();
		_roo->_sco->setClient(ref);
		++(*(_roo->_num));
	}
}

template <typename Tx>
void CppTools::CTData::CTRefObject<Tx>::setReference(const CTRefObject<Tx>& ref)
{
	if(_roo->_sco->getClient() != ref._roo->_sco->getClient()) 
	{
		dispose();
		init();
		_roo = ref._roo;
		++(*(_roo->_num));
	}
}

template <typename Tx>
void CppTools::CTData::CTRefObject<Tx>::setReference(const CTRefObject<Tx>* ref)
{
	if((ref != this) && (_roo->_sco->getClient() != ref->_roo->_sco->getClient()))
	{
		dispose();
		init();
		_roo = ref->_roo;
		++(*(_roo->_num));
	}
}

template <typename Tx>
typename CppTools::CTData::CTRefObject<Tx>::p_Tx CppTools::CTData::CTRefObject<Tx>::getReference() const
{
	return _roo->_sco->getClient();
}

template <typename Tx>
const typename CppTools::CTData::CTRefObject<Tx>::p_Tx CppTools::CTData::CTRefObject<Tx>::operator ->() const
{
	return _roo->_sco->getClient();
}

template <typename Tx>
typename CppTools::CTData::CTRefObject<Tx>::p_Tx CppTools::CTData::CTRefObject<Tx>::operator ->()
{
	return _roo->_sco->getClient();
}

template <typename Tx>
const Tx& CppTools::CTData::CTRefObject<Tx>::operator *() const
{
	return *(_roo->_sco->getClient());
}

template <typename Tx>
Tx& CppTools::CTData::CTRefObject<Tx>::operator *()
{
	return *(_roo->_sco->getClient());
}