#include <algorithm>
#include <core\CTCMemory.h>

//CTSvrMulClient

template <typename Tx>
CppTools::CTData::CTSvrMulClient<Tx>::CTSvrMulClient(const p_SCOBase_t sever)
: CTSvrClntBase(sever),
num(0), c_maxnum(16), client(NULL), list_client(NULL)
{
	init();
}

template <typename Tx>
CppTools::CTData::CTSvrMulClient<Tx>::~CTSvrMulClient()
{
	dispose();
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<Tx>::init()
{
	list_client = new lclient_t();
	client = CppTools::CTMemory::NewArray1d<Tx*>(c_maxnum, NULL);
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<Tx>::dispose()
{
	num = 0;
	DeleteObj(list_client);
	int i;
	for(i = 0; i < c_maxnum; ++i)
		client[i] = NULL;
	DeleteObjs(client);
	c_maxnum = 16;
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<Tx>::clear()
{
	for(lclient_it it = list_client->begin(); it != list_client->end(); ++it)
		delete (*it);
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<Tx>::renew()
{
	dispose();
	init();
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<Tx>::setClient(p_Tx client)
{
	if(client)
	{
		if(!num)
		{
			list_client->push_back(client);
			++num;
			refreshPointer();
			return;
		}
		else
		{
			lclient_it t_repeat = std::find(list_client->begin(), list_client->end(), client);
			if(t_repeat != list_client->end())
				return;
			else
			{
				list_client->push_back(client);
				++num;
				refreshPointer();
			}
		}
	}
}

template <typename Tx>
CTSize_t CppTools::CTData::CTSvrMulClient<Tx>::size() const
{
	return num;
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<Tx>::refresh()
{
	int i = 0;
	for(lclient_it it = list_client->begin(); it != list_client->end(); ++it, ++i)
		client[i] = (*it);
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<Tx>::refreshPointer()
{
	if(size() >= c_maxnum)
	{
		DeleteObjs(client);
		c_maxnum *= 2;
		client = CppTools::CTMemory::NewArray1d<Tx*>(c_maxnum, NULL);
		refresh();
	}
	else
	{
		client[num - 1] = (*(--(list_client->end())));
	}
}

template <typename Tx>
typename CppTools::CTData::CTSvrMulClient<Tx>::pp_Tx CppTools::CTData::CTSvrMulClient<Tx>::getClient()
{
	return client;
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<Tx>::erase(const CTSize_t position)
{
	CTSize_t i;
	lclient_it it = list_client->begin();
	for(i = 0;i < position; ++i)
	{
		if(it != list_client->end())
		{
			++it;
		}
	}
	if(it != list_client->end())
	{
		list_client->erase(it);
		--num;
		refresh();
		client[num] = NULL;
	}
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<Tx>::erase(const p_Tx e_obj)
{
	
	list_client->remove(e_obj);
	--num;
	refresh();
	client[num] = NULL;
}

template <typename Tx>
bool CppTools::CTData::CTSvrMulClient<Tx>::isClientValid() const
{
	if(client)
	{
		return true;
	}
	else
	{
		return false;
	}
}

//CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >

template <typename Tx>
CppTools::CTData::CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >::CTSvrMulClient(const p_SCOBase_t sever)
: CTSvrClntBase(sever),
num(0), c_maxnum(16), client(NULL), list_client(NULL)
{
	init();
}

template <typename Tx>
CppTools::CTData::CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >::~CTSvrMulClient()
{
	clear();
	dispose();
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >::init()
{
	list_client = new lclient_t();
	client = CppTools::CTMemory::NewArray1d<Tx*>(c_maxnum, NULL);
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >::dispose()
{
	num = 0;
	DeleteObj(list_client);
	int i;
	for(i = 0; i < c_maxnum; ++i)
		client[i] = NULL;
	DeleteObjs(client);
	c_maxnum = 16;
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >::clear()
{
	for(lclient_it it = list_client->begin(); it != list_client->end(); ++it)
		delete (*it);
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >::renew()
{
	clear();
	dispose();
	init();
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >::setClient(p_Tx client)
{
	if(client)
	{
		if(!num)
		{
			list_client->push_back(new SSC_t(client));
			++num;
			refreshPointer();
			return;
		}
		else
		{
			lclient_it t_repeat = std::find_if(list_client->begin(), list_client->end(), SSC_t(client));
			if(t_repeat != list_client->end())
				return;
			else
			{
				list_client->push_back(new SSC_t(client));
				++num;
				refreshPointer();
			}
		}
	}
}

template <typename Tx>
CTSize_t CppTools::CTData::CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >::size() const
{
	return num;
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >::refreshPointer()
{
	if(size() >= c_maxnum)
	{
		DeleteObjs(client);
		c_maxnum *= 2;
		client = CppTools::CTMemory::NewArray1d<Tx*>(c_maxnum, NULL);
		int i = 0;
		for(lclient_it it = list_client->begin(); it != list_client->end(); ++it, ++i)
			client[i] = ((*it)->getClient());
	}
	else
	{
		client[num - 1] = (*(--(list_client->end())))->getClient();
	}
}

template <typename Tx>
typename CppTools::CTData::CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >::pp_Tx CppTools::CTData::CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >::getClient()
{
	return client;
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >::erase(const CTSize_t position)
{
	CTSize_t i;
	lclient_it it = list_client->begin()
	for(i = 0;i < position; ++i)
	{
		if(it != list_client->end())
		{
			++it;
		}
	}
	if(it != list_client->end())
	{
		list_client->erase(it);
		--num;
		refreshPointer();
	}
}

template <typename Tx>
void CppTools::CTData::CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >::erase(const p_Tx e_obj)
{
	lclient_it it = list_client->begin();
	while(it != list_client->end())
	{
		if((*it)->getClient() == e_obj)
			break;
	}
	if(it != list_client->end())
	{
		list_client->erase(it);
		--num;
		refreshPointer();
	}
}

template <typename Tx>
bool CppTools::CTData::CTSvrMulClient<CppTools::CTData::CTSvrSngClient<Tx> >::isClientValid() const
{
	if(client)
	{
		return true;
	}
	else
	{
		return false;
	}
}