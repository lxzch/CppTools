class CppTools::CTException::CTObjectException::CTClientObjectInvalid;

template <typename Tx>
CppTools::CTData::CTSvrSngClient<Tx>::CTSvrSngClient(const p_Tx client, const p_SCOBase_t sever)
: CTSvrClntBase(sever), client(client)
{
}

template <typename Tx>
CppTools::CTData::CTSvrSngClient<Tx>::~CTSvrSngClient()
{
	client = NULL;
}

template <typename Tx>
void CppTools::CTData::CTSvrSngClient<Tx>::setClient(const p_Tx client)
{
	this->client = client;
}

template <typename Tx>
typename CppTools::CTData::CTSvrSngClient<Tx>::p_Tx CppTools::CTData::CTSvrSngClient<Tx>::getClient() const
{
	return client;
}

template <typename Tx>
typename CppTools::CTData::CTSvrSngClient<Tx>::p_Tx CppTools::CTData::CTSvrSngClient<Tx>::getSafeClient() const
{
	this->chkClientValid();
	return client;
}

template <typename Tx>
const typename CppTools::CTData::CTSvrSngClient<Tx>::p_Tx CppTools::CTData::CTSvrSngClient<Tx>::getConstClient() const
{
	this->chkClientValid();
	return dynamic_cast<const p_Tx>(client);
}

template <typename Tx>
bool CppTools::CTData::CTSvrSngClient<Tx>::isClientValid() const
{
	if(client)
	{
		return true;
	}
	else
	{
		return false;
	}
}

template <typename Tx>
void CppTools::CTData::CTSvrSngClient<Tx>::chkClientValid() const
{
	if(!isClientValid())
	{
		throw CppTools::CTException::CTObjectException::CTClientObjectInvalid();
	}
}

template <typename Tx>
bool CppTools::CTData::CTSvrSngClient<Tx>::operator < (CTSvrSngClient& right)
{
	if(this->client < right.client)
		return true;
	return false;
}

template <typename Tx>
bool CppTools::CTData::CTSvrSngClient<Tx>::operator == (CTSvrSngClient& right)
{
	if(this->client == right.client)
		return true;
	return false;
}

template <typename Tx>
bool CppTools::CTData::CTSvrSngClient<Tx>::operator () (CTSvrSngClient& in)
{
	if(this->client == in.client)
		return true;
	return false;
}

template <typename Tx>
bool CppTools::CTData::CTSvrSngClient<Tx>::operator () (CTSvrSngClient* in)
{
	if(this->client == in->client)
		return true;
	return false;
}